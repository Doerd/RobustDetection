
#!/usr/Anaconda3/python3

import numpy as np
from scipy import signal
import scipy
import wfdb
from matplotlib import pyplot
import random
import math
#np.set_printoptions(threshold=np.nan)

path = "C:\\Users\\williamadriance\\My Documents\\RobustDetection\\entry\\challenge\\2014\\"

use_setp = False

if use_setp:
	path += "set-p\\"
else:
	path += "training\\"


import os
arr = os.listdir(path)
files = [arr[i] for i in range(1,len(arr),3)]
readfile = random.choice(files)
filedir = path + readfile

######################LIST OF IMPORTANT RECORDS############################
# 2923 ---> fairly stable
# 1028 ---> incredibly difficult
# 1866 ---> good example of PACs, doesn't work too well
# 1447 ---> difficult record
# 43247 --> another good study record
###########################################################################

filedir = filedir[:len(filedir)-4]




print("Record number: " + readfile[:len(readfile)-4])


sig, fields = wfdb.rdsamp(filedir, channels=[0])

annsamp=wfdb.rdann(filedir, 'atr')[0]
#print("annsamp: ", annsamp)
#print(fields)

sig_train = []
sig_test = []
ann_train = []
ann_test = []

from time import time
'''
t0 = time()
for i in range(0, 80):
	sig_train.append(wfdb.rdsamp(path+str(100+i), channels=[0])[0])
	ann_train.append(wfdb.rdann(path+str(100+i), 'atr')[0])[0]
for i in range(80, 100):
	sig_test.append(wfdb.rdsamp(path+str(100+i), channels=[0])[0])
	ann_test.append(wfdb.rdann(path+str(100+i), 'atr')[0])
t1 = time()
print("time taken for array creation: ", str(t1-t0)[:5], "seconds")'''

def array_derivative(arr, order):
	if order==0:
		return arr
	else:
		ret = []
		for i in range(len(arr)-1):
			ret.append(arr[i+1]-arr[i])
		return array_derivative(ret, order-1)
	
def array_power(arr, power):
	return [n**power for n in arr]

def abs_array_power(arr, power):
	return [abs(n**power) for n in arr]

def normalize_array(arr, ran):
	m = max(arr) if max(arr) > abs(min(arr)) else abs(min(arr))
	return [n*(ran/m) for n in arr]

def ann_to_plot(sig, ann, height):
	ann = [a for a in ann if a > 0]
	annnew = []
	count = 0
	for i in range(len(sig)):
		if count < len(ann) and ann[count] == i:
			annnew.append(height)
			count += 1
		else:
			annnew.append(0)
	return annnew

sig = sig[:,0]





'''
sig_avg = sum(sig)/len(sig)
print("average: ", sig_avg)

sig = [n-sig_avg for n in sig]

avg_arr = [sig_avg for n in range(len(sig))]


threshold = (sum([abs(number) for number in sig])/len(sig))
my_guess = [0.3 if n > threshold or n < -1*threshold else 0 for n in sig]
'''

###########
#  Start  #
#   of    #
#  window #
###########

def max_index(arr):
	index = 0
	for i in range(len(arr)):
		if arr[i]>arr[index]:
			index = i
	return index

init_window_width = 190
window_width = init_window_width

windowing_result_plotform = [0]*len(sig)
windows_plotted = []

ann_guess_1 = []
arrays_windows = []

#designfilt('bandpassfir', 'FilterOrder',50,'CutoffFrequency1',0.5,'CutoffFrequency2',45,'SampleRate',400)

arr = sig
#sig = [abs(n) for n in sig]
#sig = np.convolve(sig, h)

sigavg = np.mean(sig)

'''
highpass
h = [
    0.000000000000000000,
    0.000000688079373601,
    0.000002799557647008,
    0.000006390551560924,
    0.000011495910890062,
    0.000018126769350187,
    0.000026267561437421,
    0.000035872511549462,
    0.000046861621172260,
    0.000059116199713020,
    0.000072474004268640,
    0.000086724072775932,
    0.000101601353133805,
    0.000116781247565362,
    0.000131874206265455,
    0.000146420516850878,
    0.000159885445927178,
    0.000171654895884503,
    0.000181031743564161,
    0.000187233027486367,
    0.000189388146751443,
    0.000186538227444618,
    0.000177636801383594,
    0.000161551927417890,
    0.000137069867363280,
    0.000102900407250769,
    0.000057683890175337,
    0.000000000000000000,
    -0.000071621694078304,
    -0.000158689453091544,
    -0.000262735397209543,
    -0.000385299934112298,
    -0.000527914705930231,
    -0.000692084206327874,
    -0.000879266250649455,
    -0.001090851511652298,
    -0.001328142360632854,
    -0.001592331278134224,
    -0.001884479119383697,
    -0.002205493536662410,
    -0.002556107873532196,
    -0.002936860853878784,
    -0.003348077391791147,
    -0.003789850846180116,
    -0.004262027036626731,
    -0.004764190324213116,
    -0.005295652043088243,
    -0.005855441545411769,
    -0.006442300094346390,
    -0.007054677807265955,
    -0.007690733814729550,
    -0.008348339760535652,
    -0.009025086724880636,
    -0.009718295606928426,
    -0.010425030955632788,
    -0.011142118189159209,
    -0.011866164094479255,
    -0.012593580450421860,
    -0.013320610570433083,
    -0.014043358516278881,
    -0.014757820691663238,
    -0.015459919485929847,
    -0.016145538603326588,
    -0.016810559683336460,
    -0.017450899792844816,
    -0.018062549351871984,
    -0.018641610041614874,
    -0.019184332236881665,
    -0.019687151504839816,
    -0.020146723718398579,
    -0.020559958345475915,
    -0.020924049494716185,
    -0.021236504323685609,
    -0.021495168446835116,
    -0.021698248017147887,
    -0.021844328196858394,
    -0.021932387778338173,
    0.978038190234480798,
    -0.021932387778338173,
    -0.021844328196858394,
    -0.021698248017147887,
    -0.021495168446835120,
    -0.021236504323685613,
    -0.020924049494716185,
    -0.020559958345475915,
    -0.020146723718398579,
    -0.019687151504839819,
    -0.019184332236881669,
    -0.018641610041614881,
    -0.018062549351871991,
    -0.017450899792844816,
    -0.016810559683336460,
    -0.016145538603326591,
    -0.015459919485929849,
    -0.014757820691663238,
    -0.014043358516278880,
    -0.013320610570433083,
    -0.012593580450421865,
    -0.011866164094479258,
    -0.011142118189159210,
    -0.010425030955632787,
    -0.009718295606928426,
    -0.009025086724880638,
    -0.008348339760535652,
    -0.007690733814729546,
    -0.007054677807265956,
    -0.006442300094346392,
    -0.005855441545411768,
    -0.005295652043088247,
    -0.004764190324213121,
    -0.004262027036626734,
    -0.003789850846180116,
    -0.003348077391791147,
    -0.002936860853878787,
    -0.002556107873532196,
    -0.002205493536662408,
    -0.001884479119383697,
    -0.001592331278134225,
    -0.001328142360632854,
    -0.001090851511652299,
    -0.000879266250649456,
    -0.000692084206327874,
    -0.000527914705930231,
    -0.000385299934112298,
    -0.000262735397209543,
    -0.000158689453091545,
    -0.000071621694078304,
    0.000000000000000000,
    0.000057683890175337,
    0.000102900407250769,
    0.000137069867363281,
    0.000161551927417890,
    0.000177636801383594,
    0.000186538227444618,
    0.000189388146751443,
    0.000187233027486367,
    0.000181031743564161,
    0.000171654895884503,
    0.000159885445927178,
    0.000146420516850878,
    0.000131874206265456,
    0.000116781247565362,
    0.000101601353133805,
    0.000086724072775932,
    0.000072474004268640,
    0.000059116199713020,
    0.000046861621172260,
    0.000035872511549462,
    0.000026267561437421,
    0.000018126769350187,
    0.000011495910890062,
    0.000006390551560924,
    0.000002799557647008,
    0.000000688079373601,
    0.000000000000000000,
]
'''
'''
#bandpass first try
h = [
	-0.000000000000000004,
    0.000000000000000006,
    0.000000000001797150,
    0.000000000029288704,
    0.000000000190634088,
    0.000000000773181814,
    0.000000002318789327,
    0.000000005597090258,
    0.000000011395199381,
    0.000000020088545403,
    0.000000031048419486,
    0.000000042056271477,
    0.000000048991687646,
    0.000000046088866380,
    0.000000026971261953,
    -0.000000013538914075,
    -0.000000077148377579,
    -0.000000159990424237,
    -0.000000251537292263,
    -0.000000335351729788,
    -0.000000392170404971,
    -0.000000405177299625,
    -0.000000366509856686,
    -0.000000283268949257,
    -0.000000180853556360,
    -0.000000101562925569,
    -0.000000097235965681,
    -0.000000216174231551,
    -0.000000486453823880,
    -0.000000899533830705,
    -0.000001399305466424,
    -0.000001881957190641,
    -0.000002211025471337,
    -0.000002249829831559,
    -0.000001910544150660,
    -0.000001216066221815,
    -0.000000368336347882,
    0.000000184555347944,
    -0.000000310102345058,
    -0.000002953800200907,
    -0.000009223819035383,
    -0.000020983491152616,
    -0.000040478938066300,
    -0.000070327239471426,
    -0.000113501224488192,
    -0.000173314812324166,
    -0.000253410441166769,
    -0.000359066398490777,
    -0.000505623444285444,
    -0.000705395709095397,
    -0.000954161077505681,
    -0.001227737488073425,
    -0.001488890960401580,
    -0.001704969926537052,
    -0.001872097865992825,
    -0.002037209693954834,
    -0.002306582519753216,
    -0.002830719808861126,
    -0.003761565655991918,
    -0.005188372193827253,
    -0.007070294662199777,
    -0.009192444176393347,
    -0.011172907360887260,
    -0.012538065856947243,
    -0.012862884894286813,
    -0.011946566689071580,
    -0.009970627702774099,
    -0.007575841201471001,
    -0.005804089340557301,
    -0.005882785277746301,
    -0.008877273719747208,
    -0.015287480081774316,
    -0.024702199131372796,
    -0.035632398617423344,
    -0.045615490605609710,
    -0.051618571801048660,
    -0.050684898951649737,
    -0.040687678880294939,
    -0.021003925893932150,
    0.007082064096143736,
    0.040384785870624343,
    0.074276309989355860,
    0.103524450406299873,
    0.123332139181715025,
    0.130337310755906405,
    0.123332139181714151,
    0.103524450406299651,
    0.074276309989356443,
    0.040384785870624294,
    0.007082064096143519,
    -0.021003925893932171,
    -0.040687678880295022,
    -0.050684898951649737,
    -0.051618571801048493,
    -0.045615490605609654,
    -0.035632398617423428,
    -0.024702199131372803,
    -0.015287480081774347,
    -0.008877273719747213,
    -0.005882785277746256,
    -0.005804089340557315,
    -0.007575841201471037,
    -0.009970627702774099,
    -0.011946566689071590,
    -0.012862884894286813,
    -0.012538065856947203,
    -0.011172907360887246,
    -0.009192444176393340,
    -0.007070294662199762,
    -0.005188372193827235,
    -0.003761565655991908,
    -0.002830719808861123,
    -0.002306582519753225,
    -0.002037209693954839,
    -0.001872097865992830,
    -0.001704969926537065,
    -0.001488890960401599,
    -0.001227737488073427,
    -0.000954161077505687,
    -0.000705395709095405,
    -0.000505623444285442,
    -0.000359066398490770,
    -0.000253410441166763,
    -0.000173314812324166,
    -0.000113501224488186,
    -0.000070327239471416,
    -0.000040478938066294,
    -0.000020983491152622,
    -0.000009223819035388,
    -0.000002953800200903,
    -0.000000310102345064,
    0.000000184555347935,
    -0.000000368336347881,
    -0.000001216066221805,
    -0.000001910544150655,
    -0.000002249829831568,
    -0.000002211025471342,
    -0.000001881957190641,
    -0.000001399305466427,
    -0.000000899533830712,
    -0.000000486453823883,
    -0.000000216174231545,
    -0.000000097235965682,
    -0.000000101562925578,
    -0.000000180853556364,
    -0.000000283268949256,
    -0.000000366509856688,
    -0.000000405177299636,
    -0.000000392170404987,
    -0.000000335351729787,
    -0.000000251537292264,
    -0.000000159990424251,
    -0.000000077148377585,
    -0.000000013538914072,
    0.000000026971261951,
    0.000000046088866375,
    0.000000048991687648,
    0.000000042056271483,
    0.000000031048419485,
    0.000000020088545398,
    0.000000011395199378,
    0.000000005597090263,
    0.000000002318789325,
    0.000000000773181808,
    0.000000000190634088,
    0.000000000029288708,
    0.000000000001797154,
    -0.000000000000000002,
    -0.000000000000000002,
]
'''
h=[-0.001235955004454388, -0.0010981666711841068, -0.00049813451283962906, 0.00053862119319714825, 0.0016793402858261966, 0.0021949884166215235, 0.0012383538976629483, -0.0015277438599208865, -0.0053140663329846148, -0.0081332341805461332, -0.0076070535109608629, -0.0024545841845186314, 0.0061131404283434271, 0.014087958211875234, 0.016062368353879981, 0.008048930263176381, -0.0095216600065439593, -0.030315583055302339, -0.043373958292364574, -0.037157460165446292, -0.0048780594483791885, 0.05129549206976429, 0.11937543352687457, 0.18089650100110091, 0.2173944204245834, 0.2173944204245834, 0.18089650100110091, 0.11937543352687459, 0.05129549206976429, -0.0048780594483791885, -0.037157460165446299, -0.043373958292364574, -0.030315583055302346, -0.0095216600065439611, 0.008048930263176381, 0.016062368353879985, 0.014087958211875232,0.0061131404283434297, -0.002454584184518634, -0.0076070535109608664, -0.0081332341805461332, -0.00531406633298462, -0.0015277438599208871,0.0012383538976629498, 0.0021949884166215269, 0.0016793402858261966, 0.00053862119319714858, -0.00049813451283962906, -0.0010981666711841077, -0.001235955004454388]
'''
IIR FILTER:
b, a = signal.butter(8, [0.02, 0.2],"bandpass")
sig = signal.filtfilt(b,a,sig)
print(np.all(np.abs(np.roots(a))<1))
'''
#sig = [abs(n) for n in sig]
sig = np.convolve(sig, h)[(len(h)-1)//2:]



i=0
#tempc is used to prevent two predictions from being too close; currently unused
tempc = -999
prev_maxx=0.5


while i<len(sig):
	if window_width < 150:
		window_width = 150
	if window_width > 300:
		window_width = 300
	windows_plotted.append(0.1)
	for j in range(window_width-1):
		windows_plotted.append(0)
	temp = sig[i:i+window_width]

	shaving_off = 0.15
	maxx = max(temp)
	ann_guess_temp = []
	for q in range(len(temp)):
		c = i+q
		if c<len(windowing_result_plotform):
			#here I shave off a certain number of samples that are within range of the max and use tempc to make sure beats aren't too close
			if temp[q] >= (1-shaving_off)*maxx and c-tempc>0: #and abs((maxx/prev_maxx)-1)<0.2:
				windowing_result_plotform[c] = 2.9

				tempc = c
				prev_maxx = maxx

				#The actual predictions:
				ann_guess_temp.append(c)
			else:
				windowing_result_plotform[c] = 0
	
	index = -1
	prev_value = -999
	peaks = []
	for j in ann_guess_temp:
		if j-prev_value > 10:
			peaks.append([])
			index += 1
			prev_value = j
		peaks[index].append(j)
	
	for j in peaks:
		ann_guess_1.append(j)
		
	if len(peaks) != 0:
		maxes = [max(arr) for arr in peaks]
		midpoint = sum(maxes)/len(maxes)-i
	else:
		midpoint = window_width/2
		
	num_peaks = len(peaks)
	
	i += window_width
	
	#critical section; determines how much window changes based on location of beat
	mid_difference = midpoint-window_width//2

	if mid_difference == 0:
		direction = 1
	else:
		direction = int(mid_difference/abs(mid_difference))
		
	window_width += int(mid_difference)

	if(num_peaks>=2):
		#print(window_width)
		window_width = int(window_width/num_peaks)
		#print(window_width)
	
	
###########
#  	End   #
#   of    #
#  window #
###########	

#Now is the transforming of ann_guess_1 into the real predictions
ann_guess = [max(arr) for arr in ann_guess_1]

#print("guess", ann_guess[:200])
#print("actual", annsamp[:200])

correct = 0
for i in ann_guess:
	for j in annsamp:
		if abs(i-j)<20:
			correct += 1
#print(ann_guess)
#print(annsamp)
#print(correct)
#print(len(annsamp))
print("accuracy: ", correct/len(ann_guess))

'''
transformed = sig
#print("FFT:\n", np.fft.fft(sig))
length = len(sig)
mx_sig = max(sig)
mx_trans = max(transformed)
pyplot.plot([0 if n<length else sig[n-length] for n in range(2*length)], 'blue')
pyplot.plot(transformed, 'red')

'''
annn = ann_to_plot(sig,ann_guess,2.9)

#fil = signal.firwin(50,[0.56,45],pass_zero=False,nyq=300)
#print([i for i in fil])

pyplot.plot(annn, 'yellow')
pyplot.plot(windows_plotted, 'red')
pyplot.plot(ann_to_plot(sig, annsamp, 2), 'magenta')
pyplot.plot(arr)
pyplot.plot(sig)
#pyplot.plot(avg, 'green')

'''
Below is example of Fast Fourier Transform from scipy>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
'''
'''
N = 600
# sample spacing
T = 1.0 / 800.0
x = np.linspace(0.0, N*T, N)
y = np.sin(50.0 * 2.0*np.pi*x) + 0.5*np.sin(200.0 * 2.0*np.pi*x)
yf = scipy.fftpack.fft(y)
print(yf)
xf = np.linspace(0.0, 1.0/(2.0*T), N/2)

fig, ax = pyplot.subplots()
ax.plot(xf, 2.0/N * np.abs(yf[:N//2]))
'''
'''
End of example>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
'''

pyplot.show()


